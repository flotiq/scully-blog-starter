{"version":3,"file":"contentMedia.service.d.ts","sources":["contentMedia.service.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;AAkBA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyG2C,AAEA","sourcesContent":["/**\r\n * Flotiq User API\r\n * ## Getting started   This is your Flotiq User API that allows you to access your data through the Content API that you defined.   ### Access to data   There are several methods that you can use to access your data:  * Live API docs - available via <code>Try it out</code> button available next to each endpoint   * Copying example code on the right side of each endpoint  * By downloading the SDKs available in mulitple languages.  * By downloading the Postman collection and importing it into Postman.    Each of these methods is described in length in the [user documentation](https://flotiq.com/docs/).   ### Authorization   In order to make use of the provided documentation, example code, SDKs and so on - you will need to pull out your API key. We recommend that you start with the ReadOnly API Key which will allow you to make all the `GET` requests but will error-out when you try to modify content. Please remember to replace the key for `POST`, `PUT` and `DELETE` calls.   It\\'s also possible to use scoped API keys - you can create those in the API keys section of the Flotiq user interface. This will allow you to create a key that only authorizes access to a specific content type (or a set of content types, if you choose so). Read more about how to use and create API keys in the [API keys documentation](https://flotiq.com/docs/API/).   ## Object access   Once you define a Content Type it will become available in your Content API as a set of endpoints that will allow you to work with objects:   * create  * list  * update  * delete  * batch create  * retrieve single object.  ### Hydration   When you build Content Types that have relation to others your objects will optionally support hydration of related entities. The endpoints that support object retrieval accept a `hydrate` parameter, which can be used to easily fetch hydrated objects. Since this breaks the standard REST concepts - it\\'s not enabled by default, but it\\'s a very handy feature that allows to reduce the amount of HTTP requests sent over the wire and we strongly recommend to use it.\r\n *\r\n * The version of the OpenAPI document: 2.0.1\r\n * Contact: hello@flotiq.com\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nimport { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { BatchResponse } from '../model/models';\r\nimport { Media } from '../model/models';\r\nimport { MediaList } from '../model/models';\r\nimport { MediaWithoutInternal } from '../model/models';\r\nimport { Configuration } from '../configuration';\r\nexport declare class ContentMediaService {\r\n    protected httpClient: HttpClient;\r\n    protected basePath: string;\r\n    defaultHeaders: HttpHeaders;\r\n    configuration: Configuration;\r\n    encoder: HttpParameterCodec;\r\n    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);\r\n    private addToHttpParams;\r\n    private addToHttpParamsRecursive;\r\n    /**\r\n     * Allows you to create or create and update up to 100 objects of Media type. &lt;br /&gt;&lt;a target&#x3D;\\&#39;_blank\\&#39; href&#x3D;\\&#39;https://apidoc.flotiq.com/?url&#x3D;https%3A%2F%2Fapi.flotiq.com%2Fapi%2Fv1%2Finternal%2Fopen-api-schema.json%3Fauth_token%3D8cd0014d94f725f55a629649090ac308#%2FContent: Media%2FbatchCreate_media\\&#39;&gt;&lt;code&gt;Try it out&lt;/code&gt;&lt;a&gt;\r\n     * @param updateExisting Overwrite existing objects\r\n     * @param mediaWithoutInternal\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    batchCreateMedia(updateExisting?: boolean, mediaWithoutInternal?: Array<MediaWithoutInternal>, observe?: 'body', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/json';\r\n    }): Observable<BatchResponse>;\r\n    batchCreateMedia(updateExisting?: boolean, mediaWithoutInternal?: Array<MediaWithoutInternal>, observe?: 'response', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/json';\r\n    }): Observable<HttpResponse<BatchResponse>>;\r\n    batchCreateMedia(updateExisting?: boolean, mediaWithoutInternal?: Array<MediaWithoutInternal>, observe?: 'events', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/json';\r\n    }): Observable<HttpEvent<BatchResponse>>;\r\n    /**\r\n     * Allows you to create object of Media type. Please mind, that you are responsible for generating a unique object ID yourself.&lt;br /&gt;&lt;a target&#x3D;\\&#39;_blank\\&#39; href&#x3D;\\&#39;https://apidoc.flotiq.com/?url&#x3D;https%3A%2F%2Fapi.flotiq.com%2Fapi%2Fv1%2Finternal%2Fopen-api-schema.json%3Fauth_token%3D8cd0014d94f725f55a629649090ac308#%2FContent: Media%2Fcreate_media\\&#39;&gt;&lt;code&gt;Try it out&lt;/code&gt;&lt;a&gt;\r\n     * @param mediaWithoutInternal\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    createMedia(mediaWithoutInternal?: MediaWithoutInternal, observe?: 'body', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/json';\r\n    }): Observable<Media>;\r\n    createMedia(mediaWithoutInternal?: MediaWithoutInternal, observe?: 'response', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/json';\r\n    }): Observable<HttpResponse<Media>>;\r\n    createMedia(mediaWithoutInternal?: MediaWithoutInternal, observe?: 'events', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/json';\r\n    }): Observable<HttpEvent<Media>>;\r\n    /**\r\n     * Removes Media object.&lt;br /&gt;&lt;a target&#x3D;\\&#39;_blank\\&#39; href&#x3D;\\&#39;https://apidoc.flotiq.com/?url&#x3D;https%3A%2F%2Fapi.flotiq.com%2Fapi%2Fv1%2Finternal%2Fopen-api-schema.json%3Fauth_token%3D8cd0014d94f725f55a629649090ac308#%2FContent: Media%2Fdelete_media\\&#39;&gt;&lt;code&gt;Try it out&lt;/code&gt;&lt;a&gt;\r\n     * @param id ContentObject identifier\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    deleteMedia(id: string, observe?: 'body', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: undefined;\r\n    }): Observable<any>;\r\n    deleteMedia(id: string, observe?: 'response', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: undefined;\r\n    }): Observable<HttpResponse<any>>;\r\n    deleteMedia(id: string, observe?: 'events', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: undefined;\r\n    }): Observable<HttpEvent<any>>;\r\n    /**\r\n     * Returns all information about Media object. &lt;br /&gt;&lt;a target&#x3D;\\&#39;_blank\\&#39; href&#x3D;\\&#39;https://apidoc.flotiq.com/?url&#x3D;https%3A%2F%2Fapi.flotiq.com%2Fapi%2Fv1%2Finternal%2Fopen-api-schema.json%3Fauth_token%3D8cd0014d94f725f55a629649090ac308#%2FContent: Media%2Fget_media\\&#39;&gt;&lt;code&gt;Try it out&lt;/code&gt;&lt;a&gt;\r\n     * @param id ContentObject identifier\r\n     * @param hydrate Should hydrate relations of object, for now only one level of hydration is possible\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    getMedia(id: string, hydrate?: number, observe?: 'body', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/json';\r\n    }): Observable<Media>;\r\n    getMedia(id: string, hydrate?: number, observe?: 'response', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/json';\r\n    }): Observable<HttpResponse<Media>>;\r\n    getMedia(id: string, hydrate?: number, observe?: 'events', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/json';\r\n    }): Observable<HttpEvent<Media>>;\r\n    /**\r\n     * List objects of Media type. &lt;br /&gt;&lt;a target&#x3D;\\&#39;_blank\\&#39; href&#x3D;\\&#39;https://apidoc.flotiq.com/?url&#x3D;https%3A%2F%2Fapi.flotiq.com%2Fapi%2Fv1%2Finternal%2Fopen-api-schema.json%3Fauth_token%3D8cd0014d94f725f55a629649090ac308#%2FContent: Media%2Flist_media\\&#39;&gt;&lt;code&gt;Try it out&lt;/code&gt;&lt;a&gt;\r\n     * @param page Listing page number, 1-based\r\n     * @param limit Page limit\r\n     * @param orderBy Order by field\r\n     * @param orderDirection Order direction\r\n     * @param hydrate Should hydrate relations of object, for now only one level of hydration is possible\r\n     * @param filters List filters\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    listMedia(page?: number, limit?: number, orderBy?: string, orderDirection?: string, hydrate?: number, filters?: string, observe?: 'body', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/json';\r\n    }): Observable<MediaList>;\r\n    listMedia(page?: number, limit?: number, orderBy?: string, orderDirection?: string, hydrate?: number, filters?: string, observe?: 'response', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/json';\r\n    }): Observable<HttpResponse<MediaList>>;\r\n    listMedia(page?: number, limit?: number, orderBy?: string, orderDirection?: string, hydrate?: number, filters?: string, observe?: 'events', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/json';\r\n    }): Observable<HttpEvent<MediaList>>;\r\n    /**\r\n     * Allows update of the Media object, it has to have all fields, as this operation overwrites the object. All properties  not included in the payload will be lost. &lt;br /&gt;&lt;a target&#x3D;\\&#39;_blank\\&#39; href&#x3D;\\&#39;https://apidoc.flotiq.com/?url&#x3D;https%3A%2F%2Fapi.flotiq.com%2Fapi%2Fv1%2Finternal%2Fopen-api-schema.json%3Fauth_token%3D8cd0014d94f725f55a629649090ac308#%2FContent: Media%2Fupdate_media\\&#39;&gt;&lt;code&gt;Try it out&lt;/code&gt;&lt;a&gt;\r\n     * @param id ContentObject identifier\r\n     * @param mediaWithoutInternal\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    updateMedia(id: string, mediaWithoutInternal?: MediaWithoutInternal, observe?: 'body', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/json';\r\n    }): Observable<Media>;\r\n    updateMedia(id: string, mediaWithoutInternal?: MediaWithoutInternal, observe?: 'response', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/json';\r\n    }): Observable<HttpResponse<Media>>;\r\n    updateMedia(id: string, mediaWithoutInternal?: MediaWithoutInternal, observe?: 'events', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/json';\r\n    }): Observable<HttpEvent<Media>>;\r\n}\r\n"]}