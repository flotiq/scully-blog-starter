/**
 * Flotiq User API
 * ## Getting started   This is your Flotiq User API that allows you to access your data through the Content API that you defined.   ### Access to data   There are several methods that you can use to access your data:  * Live API docs - available via <code>Try it out</code> button available next to each endpoint   * Copying example code on the right side of each endpoint  * By downloading the SDKs available in mulitple languages.  * By downloading the Postman collection and importing it into Postman.    Each of these methods is described in length in the [user documentation](https://flotiq.com/docs/).   ### Authorization   In order to make use of the provided documentation, example code, SDKs and so on - you will need to pull out your API key. We recommend that you start with the ReadOnly API Key which will allow you to make all the `GET` requests but will error-out when you try to modify content. Please remember to replace the key for `POST`, `PUT` and `DELETE` calls.   It\'s also possible to use scoped API keys - you can create those in the API keys section of the Flotiq user interface. This will allow you to create a key that only authorizes access to a specific content type (or a set of content types, if you choose so). Read more about how to use and create API keys in the [API keys documentation](https://flotiq.com/docs/API/).   ## Object access   Once you define a Content Type it will become available in your Content API as a set of endpoints that will allow you to work with objects:   * create  * list  * update  * delete  * batch create  * retrieve single object.  ### Hydration   When you build Content Types that have relation to others your objects will optionally support hydration of related entities. The endpoints that support object retrieval accept a `hydrate` parameter, which can be used to easily fetch hydrated objects. Since this breaks the standard REST concepts - it\'s not enabled by default, but it\'s a very handy feature that allows to reduce the amount of HTTP requests sent over the wire and we strongly recommend to use it.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: hello@flotiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { BatchResponse } from '../model/models';
import { Blogpost } from '../model/models';
import { BlogpostList } from '../model/models';
import { BlogpostWithoutInternal } from '../model/models';
import { Configuration } from '../configuration';
import * as Éµngcc0 from '@angular/core';
export declare class ContentBlogPostService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * Allows you to create or create and update up to 100 objects of Blog post type. &lt;br /&gt;&lt;a target&#x3D;\&#39;_blank\&#39; href&#x3D;\&#39;https://apidoc.flotiq.com/?url&#x3D;https%3A%2F%2Fapi.flotiq.com%2Fapi%2Fv1%2Finternal%2Fopen-api-schema.json%3Fauth_token%3D8cd0014d94f725f55a629649090ac308#%2FContent: Blog post%2FbatchCreateBlogpost\&#39;&gt;&lt;code&gt;Try it out&lt;/code&gt;&lt;a&gt;
     * @param updateExisting Overwrite existing objects
     * @param blogpostWithoutInternal
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    batchCreateBlogpost(updateExisting?: boolean, blogpostWithoutInternal?: Array<BlogpostWithoutInternal>, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BatchResponse>;
    batchCreateBlogpost(updateExisting?: boolean, blogpostWithoutInternal?: Array<BlogpostWithoutInternal>, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BatchResponse>>;
    batchCreateBlogpost(updateExisting?: boolean, blogpostWithoutInternal?: Array<BlogpostWithoutInternal>, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BatchResponse>>;
    /**
     * Allows you to create object of Blog post type. Please mind, that you are responsible for generating a unique object ID yourself.&lt;br /&gt;&lt;a target&#x3D;\&#39;_blank\&#39; href&#x3D;\&#39;https://apidoc.flotiq.com/?url&#x3D;https%3A%2F%2Fapi.flotiq.com%2Fapi%2Fv1%2Finternal%2Fopen-api-schema.json%3Fauth_token%3D8cd0014d94f725f55a629649090ac308#%2FContent: Blog post%2FcreateBlogpost\&#39;&gt;&lt;code&gt;Try it out&lt;/code&gt;&lt;a&gt;
     * @param blogpostWithoutInternal
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createBlogpost(blogpostWithoutInternal?: BlogpostWithoutInternal, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Blogpost>;
    createBlogpost(blogpostWithoutInternal?: BlogpostWithoutInternal, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Blogpost>>;
    createBlogpost(blogpostWithoutInternal?: BlogpostWithoutInternal, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Blogpost>>;
    /**
     * Removes Blog post object.&lt;br /&gt;&lt;a target&#x3D;\&#39;_blank\&#39; href&#x3D;\&#39;https://apidoc.flotiq.com/?url&#x3D;https%3A%2F%2Fapi.flotiq.com%2Fapi%2Fv1%2Finternal%2Fopen-api-schema.json%3Fauth_token%3D8cd0014d94f725f55a629649090ac308#%2FContent: Blog post%2FdeleteBlogpost\&#39;&gt;&lt;code&gt;Try it out&lt;/code&gt;&lt;a&gt;
     * @param id ContentObject identifier
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteBlogpost(id: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<any>;
    deleteBlogpost(id: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<HttpResponse<any>>;
    deleteBlogpost(id: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<HttpEvent<any>>;
    /**
     * Returns all information about Blog post object. &lt;br /&gt;&lt;a target&#x3D;\&#39;_blank\&#39; href&#x3D;\&#39;https://apidoc.flotiq.com/?url&#x3D;https%3A%2F%2Fapi.flotiq.com%2Fapi%2Fv1%2Finternal%2Fopen-api-schema.json%3Fauth_token%3D8cd0014d94f725f55a629649090ac308#%2FContent: Blog post%2FgetBlogpost\&#39;&gt;&lt;code&gt;Try it out&lt;/code&gt;&lt;a&gt;
     * @param id ContentObject identifier
     * @param hydrate Should hydrate relations of object, for now only one level of hydration is possible
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getBlogpost(id: string, hydrate?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Blogpost>;
    getBlogpost(id: string, hydrate?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Blogpost>>;
    getBlogpost(id: string, hydrate?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Blogpost>>;
    /**
     * List objects of Blog post type. &lt;br /&gt;&lt;a target&#x3D;\&#39;_blank\&#39; href&#x3D;\&#39;https://apidoc.flotiq.com/?url&#x3D;https%3A%2F%2Fapi.flotiq.com%2Fapi%2Fv1%2Finternal%2Fopen-api-schema.json%3Fauth_token%3D8cd0014d94f725f55a629649090ac308#%2FContent: Blog post%2FlistBlogpost\&#39;&gt;&lt;code&gt;Try it out&lt;/code&gt;&lt;a&gt;
     * @param page Listing page number, 1-based
     * @param limit Page limit
     * @param orderBy Order by field
     * @param orderDirection Order direction
     * @param hydrate Should hydrate relations of object, for now only one level of hydration is possible
     * @param filters List filters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    listBlogpost(page?: number, limit?: number, orderBy?: string, orderDirection?: string, hydrate?: number, filters?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BlogpostList>;
    listBlogpost(page?: number, limit?: number, orderBy?: string, orderDirection?: string, hydrate?: number, filters?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BlogpostList>>;
    listBlogpost(page?: number, limit?: number, orderBy?: string, orderDirection?: string, hydrate?: number, filters?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BlogpostList>>;
    /**
     * Allows update of the Blog post object, it has to have all fields, as this operation overwrites the object. All properties  not included in the payload will be lost. &lt;br /&gt;&lt;a target&#x3D;\&#39;_blank\&#39; href&#x3D;\&#39;https://apidoc.flotiq.com/?url&#x3D;https%3A%2F%2Fapi.flotiq.com%2Fapi%2Fv1%2Finternal%2Fopen-api-schema.json%3Fauth_token%3D8cd0014d94f725f55a629649090ac308#%2FContent: Blog post%2FupdateBlogpost\&#39;&gt;&lt;code&gt;Try it out&lt;/code&gt;&lt;a&gt;
     * @param id ContentObject identifier
     * @param blogpostWithoutInternal
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateBlogpost(id: string, blogpostWithoutInternal?: BlogpostWithoutInternal, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Blogpost>;
    updateBlogpost(id: string, blogpostWithoutInternal?: BlogpostWithoutInternal, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Blogpost>>;
    updateBlogpost(id: string, blogpostWithoutInternal?: BlogpostWithoutInternal, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Blogpost>>;
    static Éµfac: Éµngcc0.ÉµÉµFactoryDef<ContentBlogPostService, [null, { optional: true; }, { optional: true; }]>;
    static Éµprov: Éµngcc0.ÉµÉµInjectableDef<ContentBlogPostService>;
}

//# sourceMappingURL=contentBlogPost.service.d.ts.map