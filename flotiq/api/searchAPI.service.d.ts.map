{"version":3,"file":"searchAPI.service.d.ts","sources":["searchAPI.service.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA","sourcesContent":["/**\r\n * Flotiq User API\r\n * ## Getting started   This is your Flotiq User API that allows you to access your data through the Content API that you defined.   ### Access to data   There are several methods that you can use to access your data:  * Live API docs - available via <code>Try it out</code> button available next to each endpoint   * Copying example code on the right side of each endpoint  * By downloading the SDKs available in mulitple languages.  * By downloading the Postman collection and importing it into Postman.    Each of these methods is described in length in the [user documentation](https://flotiq.com/docs/).   ### Authorization   In order to make use of the provided documentation, example code, SDKs and so on - you will need to pull out your API key. We recommend that you start with the ReadOnly API Key which will allow you to make all the `GET` requests but will error-out when you try to modify content. Please remember to replace the key for `POST`, `PUT` and `DELETE` calls.   It\\'s also possible to use scoped API keys - you can create those in the API keys section of the Flotiq user interface. This will allow you to create a key that only authorizes access to a specific content type (or a set of content types, if you choose so). Read more about how to use and create API keys in the [API keys documentation](https://flotiq.com/docs/API/).   ## Object access   Once you define a Content Type it will become available in your Content API as a set of endpoints that will allow you to work with objects:   * create  * list  * update  * delete  * batch create  * retrieve single object.  ### Hydration   When you build Content Types that have relation to others your objects will optionally support hydration of related entities. The endpoints that support object retrieval accept a `hydrate` parameter, which can be used to easily fetch hydrated objects. Since this breaks the standard REST concepts - it\\'s not enabled by default, but it\\'s a very handy feature that allows to reduce the amount of HTTP requests sent over the wire and we strongly recommend to use it.\r\n *\r\n * The version of the OpenAPI document: 2.0.1\r\n * Contact: hello@flotiq.com\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nimport { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { SearchResponse } from '../model/models';\r\nimport { Configuration } from '../configuration';\r\nexport declare class SearchAPIService {\r\n    protected httpClient: HttpClient;\r\n    protected basePath: string;\r\n    defaultHeaders: HttpHeaders;\r\n    configuration: Configuration;\r\n    encoder: HttpParameterCodec;\r\n    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);\r\n    private addToHttpParams;\r\n    private addToHttpParamsRecursive;\r\n    /**\r\n     * The Flotiq API provides a powerful search engine, which is a wrapper for ElasticSearch queries. We tried to balance between resembling the ES API (for those, who already know it) and keeping it simple and cohesive with Flotiq API. This endpoint provides means for querying content objects that match a set of criteria, with options for:   * limiting search to specific Content Types,  * limit search to specific fields,  * weighting fields to modify results scoring,  * aggregating results by fields.   You can find more information about the Search API in the [Search API docs](https://flotiq.com/docs/API/search/).\r\n     * @param q Query\r\n     * @param fields Search only in selected fields. Default: title, rawContent\r\n     * @param page Listing page number, 1-based\r\n     * @param limit Page limit\r\n     * @param orderBy Order by field\r\n     * @param orderDirection Order direction\r\n     * @param contentType Restrict search to content types set\r\n     * @param aggregateBy Field to aggregate results direction\r\n     * @param filters Filter by object properties. Expected format: filters[property1]&#x3D;value1&amp;filters[property2]&#x3D;value2\r\n     * @param postFilters Filter by object properties. Use it when you want aggregated counts without filters applied. Expected format: post_filters[property1]&#x3D;value1&amp;post_filters[property2]&#x3D;value2\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    search(q?: string, fields?: Array<string>, page?: string, limit?: string, orderBy?: string, orderDirection?: string, contentType?: Array<string>, aggregateBy?: Array<string>, filters?: object, postFilters?: object, observe?: 'body', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/json';\r\n    }): Observable<SearchResponse>;\r\n    search(q?: string, fields?: Array<string>, page?: string, limit?: string, orderBy?: string, orderDirection?: string, contentType?: Array<string>, aggregateBy?: Array<string>, filters?: object, postFilters?: object, observe?: 'response', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/json';\r\n    }): Observable<HttpResponse<SearchResponse>>;\r\n    search(q?: string, fields?: Array<string>, page?: string, limit?: string, orderBy?: string, orderDirection?: string, contentType?: Array<string>, aggregateBy?: Array<string>, filters?: object, postFilters?: object, observe?: 'events', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/json';\r\n    }): Observable<HttpEvent<SearchResponse>>;\r\n}\r\n"]}